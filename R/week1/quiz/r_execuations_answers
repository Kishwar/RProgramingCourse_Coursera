> getwd()
[1] "/Users/kishwarkumar"
> setwd("/Users/kishwarkumar/Desktop/R/week1/quiz")
> getwd()
[1] "/Users/kishwarkumar/Desktop/R/week1/quiz"
> dir()
[1] "hw1_data.csv"
> x<-load.csv("hw1_data.csv")
Error: could not find function "load.csv"
> x<-read.csv("hw1_data.csv")
> #What was the maximum ozone value in the month of May (i.e. Month = 5)?
> max(x$Ozone[!is.na(x$Ozone) & x$Month==5])
[1] 115
> #What is the mean of "Temp" when "Month" is equal to 6?
> mean(x$Temp[!is.na(x$Temp) & x$Month==6])
[1] 79.1
> #Extract the subset of rows of the data frame where Ozone values are above 31 and Temp values are above 90. What is the mean of Solar.R in this subset?
> y<-x[x$Ozone>31 & x$Temp>90,]
> y
     Ozone Solar.R Wind Temp Month Day
NA      NA      NA   NA   NA    NA  NA
NA.1    NA      NA   NA   NA    NA  NA
69      97     267  6.3   92     7   8
70      97     272  5.7   92     7   9
NA.2    NA      NA   NA   NA    NA  NA
NA.3    NA      NA   NA   NA    NA  NA
120     76     203  9.7   97     8  28
121    118     225  2.3   94     8  29
122     84     237  6.3   96     8  30
123     85     188  6.3   94     8  31
124     96     167  6.9   91     9   1
125     78     197  5.1   92     9   2
126     73     183  2.8   93     9   3
127     91     189  4.6   93     9   4
> mean(y$Solar.R[!is.na(y$Solar.R)])
[1] 212.8
> #What is the mean of the Ozone column in this dataset? Exclude missing values (coded as NA) from this calculation.
> mean(x$Ozone[!is.na(x$Ozone)])
[1] 42.12931
> #How many missing values are in the Ozone column of this data frame?
> length(x$Ozone[is.na(x$Ozone)])
[1] 37
> #What is the value of Ozone in the 47th row?
> x$Ozone[47]
[1] 21
> dim(x)
[1] 153   6
> start=dim(x)[1:1]-1
> end=dim(x)
> end=dim(x)[1:1]
> x[start:end,]
    Ozone Solar.R Wind Temp Month Day
152    18     131  8.0   76     9  29
153    20     223 11.5   68     9  30
> #Extract the last 2 rows of the data frame and print them to the console. What does the output look like?
> start=dim(x)[1:1]-1
> end=dim(x)[1:1]
> x[start:end,]
    Ozone Solar.R Wind Temp Month Day
152    18     131  8.0   76     9  29
153    20     223 11.5   68     9  30
> #How many observations (i.e. rows) are in this data frame?
> dim(x)[1:1]
[1] 153
> #Extract the first 2 rows of the data frame and print them to the console. What does the output look like?
> x[1:2,]
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
> #In the dataset provided for this Quiz, what are the column names of the dataset?
> colnames(x)
[1] "Ozone"   "Solar.R" "Wind"    "Temp"    "Month"   "Day"    
> #In the dataset provided for this Quiz, what are the column names of the dataset?
> colnames(x)
[1] "Ozone"   "Solar.R" "Wind"    "Temp"    "Month"   "Day"    
> #Suppose I have a vector x <- c(17, 14, 4, 5, 13, 12, 10) and I want to set all elements of this vector that are greater than 10 to be equal to 4. What R code achieves this?
> x <- c(17, 14, 4, 5, 13, 12, 10) 
> x[x>=11]<-4
> x
[1]  4  4  4  5  4  4 10
> #Suppose I have a vector x <- 1:4 and y <- 2:3. What is produced by the expression x + y?
> x<-1:4
> y<-2:3
> x+y
[1] 3 5 5 7
> #Suppose I have a list defined as x <- list(2, "a", "b", TRUE). What does x[[2]] give me?
> x <- list(2, "a", "b", TRUE)
> x[[2]]
[1] "a"
> #If I have two vectors x <- c(1,3, 5) and y <- c(3, 2, 10), what is produced by the expression rbind(x, y)?
> x <- c(1,3, 5)
> y <- c(3, 2, 10)
> rbind(x,y)
  [,1] [,2] [,3]
x    1    3    5
y    3    2   10
> #What is the class of the object defined by the expression x <- c(4, "a", TRUE)?
> x <- c(4, "a", TRUE)
> class(x)
[1] "character"
> If I execute the expression x <- 4L in R, what is the class of the object `x' as determined by the `class()' function?
Error: unexpected symbol in "If I"
> #If I execute the expression x <- 4L in R, what is the class of the object `x' as determined by the `class()' function?
> 
> x <- 4L
> class(x)
[1] "integer"
> is.atomic(x)
[1] TRUE
> is.atomic("numeric")
[1] TRUE
> is.atomic("list")
[1] TRUE
> is.atomic("logical")
[1] TRUE
> is.atomic("integer")
[1] TRUE
> help is.atomic()
Error: unexpected symbol in "help is.atomic"
> help is.atomic("integer")
Error: unexpected symbol in "help is.atomic"